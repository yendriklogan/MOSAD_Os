#pragma once

#include "WeightVectorModel.h"
#include "../../Combinations.h"
#include "../../../../WindowsRequirements.h"

class DECISIONAID_LIB DasDenisWeightGenerationModel : public WeightVectorModel {
	//based on article (2018, Li et al-Integration of Preferences in Decomposition MO, Algorithm 1
	char* name_problem = NULL;
	char* name_dm = NULL;
	double* zr = NULL;	//Input DM supplied aspiration level vector
	int H = -1;		//Input Number of Divisions
	double tau = -1;	//Input Expected extent of ROI
	int flag = -1;	//Input flag to determine whether keep the boundary or not (1 - include, 0 - not include)
	
	int num_reference_points = -1; //Output number of reference points
	Interval** bias_w  = NULL;		//Output whole set of bias weights generated by NUMS method
	Interval** w  = NULL;		//Output whole set of weights generated by Das and Dennis method
	Interval* wp  = NULL;		//Output pivote

	

	double epsilon = 1e-06;		//constant threshold value used by the algorithm
private:
	void DasDennisReursive(int obj, double delta, int acum_mi, Interval* vector, long* num_vector);

public:
	DasDenisWeightGenerationModel();
	void initialize(Requirements* req) override;
	Interval** execute() override;

	int getNumReferencePoints();
	Interval** getDasDennisWeights();
	Interval* getPivot();
	double* getAspirationLevel();
};
